@startuml

start
fork
  : Create Tenancy;
  Group Hub
    :Hub : User Creates a Tenancy;
    :Hub : Create Create Message;    
  EndGroup
  
  Group Service Bus
    :Bus : Pass Service Request;
  EndGroup  

  Group Service
    :SVC : Create Tenancy Object in Datastore;
    :SVC : Send Tenancy to ACT;
    :SVC : Update Tenancy Object in Datastore;
  EndGroup

fork again
  : Update Tenancy;
  Group Hub
    :Hub : User Updates a Tenancy;   
    :Hub : Create Update Message;        
  EndGroup
  
  Group Service Bus
    :Bus : Pass Service Request;
  EndGroup  

  Group Service
    :SVC : Update Tenancy Object in Datastore;
    :SVC : Send Tenancy to ACT;
    :SVC : Update Tenancy Object in Datastore;
  EndGroup  

fork again
  : Delete Tenancy;
  Group Hub
    :Hub : Tenancy reaches End;
    :Hub : Create Delete Message;
  EndGroup
  
  Group Service Bus
    :Bus : Pass Service Request;
  EndGroup  

  Group Service
    :SVC : Update Tenancy Object in Datastore;
    :SVC : Delete Tenancy on ACT;
    :SVC : Delete Tenancy Object in Datastore;
  EndGroup  
fork again
  : Report ready;  
  Group Service
    :SVC : Webhook received;
    :SVC : Get Report from ACT;
    :SVC : Store Report in Doc Manager;
    :SVC : Publish Message to HUB;
  Endgroup  

  Group Service Bus
    :Bus : Pass Service Response;
  EndGroup    

  Group Hub
    :Hub : Subscribe to Response Bus;
    :Hub : Save Report Doc Manager ID in Attachment table;
    :Hub : Notify User;
  EndGroup
fork again 
  : Get Tenancies;
  Group Hub
    :Hub : Periodic housekeeping task;
    :Hub : Create Housekeeping Message;
  EndGroup  

  Group Service Bus
    :Bus :Pass Service Request;
  EndGroup 

  Group Service
    :SVC : Get Tenancies from ACT;
    :SVC : Process Array, and Update Tenancy Objects in Datastore;
    :SVC : Publish Message to HUB;
  Endgroup   

  Group Service Bus
    :Bus : Pass Service Response;
  EndGroup   

  Group Hub
    :Hub : Subscribe to Response Bus;
    :Hub : Process Array of Tenancies;
    :Hub : Update Next Report Date on Tenancy;
  EndGroup    
endfork


stop


' fork
'   : 1, Get Templates;
'   Group Hub
'     :HUB : Get Templates;
'   EndGroup
'   Group Service
'     :SVC : Get Filterd Templates and details from Frontify;
'   EndGroup

' fork again
'   : 2, Generate Brochure;

'   Group Hub
'     :Hub : Generate Text and Images;
'     :1, Get Template;     
    
'     if ( Bespoke? ) then (TRUE)
'       :Service Request : Bespoke Flag Set TRUE;
'     else (FALSE)
'       :Service Request : Bespoke Flag Set FALSE;
'     endif
'     :Service Request : Set TemplateId;
'     :Service Request : Map Text and Images\n into Svc Request with Template Keys;
'   Endgroup

'   Group Service Bus
'     :Pass Service Request;
'   Endgroup
'   Group Service
'     Group Create CosmosDB Brochure Object
'     :SVC : Create a Brochure Object in Datastore;
'     :SVC : Store Text in Brochure Object;

'       Group Asset Upload
'         repeat
'             :Upload Image to Frontify;
'             :Save AssetId in Brochure Object;
'         repeat while (More images to upload?) is (yes) not (no)
'       EndGroup
'     EndGroup

'     if (Generate Bespoke Brochure?) then (TRUE)
'       Group Generate CSV
'         :Get All incomplete BESPOKE Brochures from Datastore;
'         :Create CSV;
'         repeat
'           :Get Brochure Object;
'           :CSV: New Row;
'           :CSV: Add Texts to matching column heading;
'           :CSV: Add AssetIds to matching column heading;
'         repeat while (More Brochure Objects?) is (yes) not (no)

'         :Upload CSV;
'         :User : Generate Brochure;
'         :3, Complete Brochure; 
'       EndGroup

'     else (FALSE)
'       Group Auto Generate
'         :Using Current Brochure Object;
'         :ExportCreative and Associate Assets and Template;
'         :Generate Brochure - Returns Brochure Id;
'       EndGroup
'     Group CleanUp
'       :Check Brochure Status;
'       :Get Brochure;
'       :Store Brochure;
'       :Complete Datastore Brochure Object;
'     EndGroup

'     Group Service Bus
'       :Return Brochure Metadata;
'     Endgroup
'     endif
'   EndGroup

' fork again
'   : 3, Complete Brochure;
'   Group Hub
'     :HUB : Complete Brochure;
'   EndGroup
'   Group Service
'     :SVC : Mark datastore Brochure Object Complete;
'   EndGroup
' endfork
' stop

@enduml
